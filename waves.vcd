$date
	Sun May 15 20:15:57 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 1 ! trap $end
$var reg 1 " clk $end
$var reg 8 # cnt [7:0] $end
$var reg 1 $ resetn $end
$scope module c $end
$var wire 1 " clk $end
$var wire 1 % pend_is_new_pc $end
$var wire 1 $ resetn $end
$var wire 5 & rs2 [4:0] $end
$var wire 5 ' rs1 [4:0] $end
$var wire 32 ( pend [31:0] $end
$var wire 7 ) opcode [6:0] $end
$var wire 32 * imm_u [31:0] $end
$var wire 32 + imm_s [31:0] $end
$var wire 32 , imm_j [31:0] $end
$var wire 32 - imm_i [31:0] $end
$var wire 32 . imm_b [31:0] $end
$var wire 32 / i_data [31:0] $end
$var wire 7 0 funct7 [6:0] $end
$var wire 3 1 funct3 [2:0] $end
$var wire 32 2 d_data [31:0] $end
$var wire 1 3 cond_out $end
$var reg 1 4 alu_alt $end
$var reg 3 5 alu_func [2:0] $end
$var reg 32 6 alu_imm [31:0] $end
$var reg 32 7 alu_left [31:0] $end
$var reg 14 8 d_addr [13:0] $end
$var reg 1 9 do_load $end
$var reg 1 : do_store $end
$var reg 32 ; dw_data [31:0] $end
$var reg 2 < dw_size [1:0] $end
$var reg 3 = funct3_saved [2:0] $end
$var reg 14 > i_addr [13:0] $end
$var reg 32 ? pc [31:0] $end
$var reg 5 @ rd [4:0] $end
$var reg 1 A reg_writeback $end
$var reg 7 B step [6:0] $end
$var reg 1 ! trap $end
$var reg 2 C update_pc [1:0] $end
$var reg 32 D vpc [31:0] $end
$var reg 32 E vs1 [31:0] $end
$var reg 32 F vs2 [31:0] $end
$var integer 32 G i [31:0] $end
$scope module a $end
$var wire 1 4 alt $end
$var wire 1 " clk $end
$var wire 3 H funct3 [2:0] $end
$var wire 32 I x [31:0] $end
$var wire 32 J y [31:0] $end
$var reg 32 K out [31:0] $end
$upscope $end
$scope module c $end
$var wire 1 " clk $end
$var wire 3 L funct3 [2:0] $end
$var wire 32 M x [31:0] $end
$var wire 32 N y [31:0] $end
$var reg 1 3 out $end
$upscope $end
$scope module r $end
$var wire 1 " clk $end
$var wire 14 O d_addr [13:0] $end
$var wire 32 P dt_data [31:0] $end
$var wire 32 Q dw_data [31:0] $end
$var wire 2 R dw_size [1:0] $end
$var wire 14 S i_addr [13:0] $end
$var reg 32 T d_data [31:0] $end
$var reg 32 U i_data [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 V i [31:0] $end
$upscope $end
$scope begin $unm_blk_1 $end
$upscope $end
$scope begin $unm_blk_8 $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
xA
bx @
bx ?
bx >
bx =
bx <
bx ;
x:
x9
bx 8
bx 7
bx 6
bx 5
x4
x3
bx 2
bx 1
bx 0
bx /
bx0 .
bx -
bx0 ,
bx +
bx000000000000 *
bx )
bx (
bx '
bx &
x%
0$
b0 #
0"
x!
$end
#5
0%
0:
09
0A
b0 C
04
b0 5
b0 H
0!
b10000000000000000000000000000000 ?
b1 B
b1 #
b100000 G
0$
1"
#10
0"
#15
b10 #
b10000000000000000000000000000000 D
b0 >
b0 S
b10 B
1"
#20
0"
#25
b1010000000000001010 ,
b101001010000000000000000 *
b1010 .
b1010 +
b1010 -
b1010 &
b1010 '
b0 0
b0 1
b10011 )
b101001010000010100010011 /
b101001010000010100010011 U
b100 B
b11 #
1"
#30
0"
#35
b100 #
1A
b1010 6
b1010 J
b0 =
b0 L
b1010 @
b0 F
b0 N
b0 E
b0 M
b1000 B
1"
#40
0"
#45
13
1A
b0 7
b0 I
b10000 B
b101 #
1"
#50
0"
#55
b110 #
1A
b100000 B
b1010 (
b1010 K
1"
#60
0"
#65
b101101010000011000110011 P
b1010 8
b1010 O
1A
b1000000 B
b111 #
1"
#70
0"
#75
b1000 #
b0 <
b0 R
b10000000000000000000000000000100 ?
1A
b1 B
b10110101 2
b10110101 T
b10010 V
1"
#80
0"
#85
1A
b10000000000000000000000000000100 D
b1010 F
b1010 N
b1010 E
b1010 M
b100 >
b100 S
b10 B
b1001 #
1"
#90
0"
#95
b1011000000000001010 ,
b101001011000000000000000 *
b100000001010 .
b1011 +
b1011 '
b1010 #
1A
b1010 7
b1010 I
b100 B
b101001011000010110010011 /
b101001011000010110010011 U
1"
#100
0"
#105
b10100 (
b10100 K
1A
b1011 @
b0 E
b0 M
b1000 B
b1011 #
1"
#110
0"
#115
b1100 #
1A
b0 7
b0 I
b10000 B
03
1"
#120
0"
#125
b1010 (
b1010 K
1A
b100000 B
b1101 #
1"
#130
0"
#135
b1110 #
1A
b1000000 B
1"
#140
0"
#145
b10000000000000000000000000001000 ?
1A
b1 B
b1111 #
b10010 V
1"
#150
0"
#155
b10000 #
1A
b10000000000000000000000000001000 D
b1010 E
b1010 M
b1000 >
b1000 S
b10 B
1"
#160
0"
#165
b1010000100000001010 ,
b101101010000000000000000 *
b1100 .
b1100 +
b1011 -
b1011 &
b1010 '
b110011 )
b101101010000011000110011 /
b101101010000011000110011 U
13
1A
b1010 7
b1010 I
b100 B
b10001 #
1"
#170
0"
#175
b10010 #
1A
b1100 @
b1000 B
b10100 (
b10100 K
1"
#180
0"
#185
1A
b10000 B
b10011 #
1"
#190
0"
#195
b10100 #
1A
b100000 B
1"
#200
0"
#205
bx P
b10100 8
b10100 O
1A
b1000000 B
b10101 #
1"
#210
0"
#215
b10110 #
b10000000000000000000000000001100 ?
1A
b1 B
bx 2
bx T
b10010 V
1"
#220
0"
#225
1A
b10000000000000000000000000001100 D
b1100 >
b1100 S
b10 B
b10111 #
1"
#230
0"
#235
b1100000110000001010 ,
b1000000101101100000000000000000 *
b110000001100 .
b10000001101 +
b10000001011 -
b1100 '
b100000 0
b11000 #
1A
b100 B
b1000000101101100000011010110011 /
b1000000101101100000011010110011 U
1"
#240
0"
#245
14
1A
b1101 @
b10100 E
b10100 M
b1000 B
b11001 #
1"
#250
0"
#255
b11010 #
1A
14
b10100 7
b10100 I
b10000 B
03
b0 (
b0 K
1"
#260
0"
#265
b1010 (
b1010 K
1A
14
b100000 B
b11011 #
1"
#270
0"
#275
b101101010000011000110011 P
b11100 #
b1010 8
b1010 O
1A
14
b1000000 B
1"
#280
0"
#285
b10110101 2
b10110101 T
b10000000000000000000000000010000 ?
1A
14
b1 B
b11101 #
b10010 V
1"
#290
0"
#295
b11110 #
1A
14
b10000000000000000000000000010000 D
b10000 >
b10000 S
b10 B
1"
#300
0"
#305
bx0 ,
bx000000000000 *
bx0 .
bx +
bx -
bx &
bx '
bx 0
bx 1
bx )
bx /
bx U
1A
14
b100 B
b11111 #
1"
#310
0"
#315
b100000 #
0A
04
bx =
bx L
bx @
bx F
bx N
bx E
bx M
b1000 B
1"
#320
0"
#325
b11110 (
b11110 K
bx 7
bx I
b10000 B
b100001 #
1"
#330
0"
#335
b100010 #
b100000 B
bx (
bx K
1"
#340
0"
#345
bx P
bx 8
bx O
b1000000 B
b100011 #
1"
#350
0"
#355
b100100 #
b10000000000000000000000000010100 ?
b1 B
bx 2
bx T
b10010 V
1"
#360
0"
#365
b10000000000000000000000000010100 D
b10100 >
b10100 S
b10 B
b100101 #
1"
#370
0"
#375
b100110 #
b100 B
1"
#380
0"
#385
b1000 B
b100111 #
1"
#390
0"
#395
b101000 #
b10000 B
1"
#400
0"
